#---------------------------------------------------------------------
# This file is created by Ansible. Do not edit it directly.
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    {% if haproxy_ssl_server_verify %}
    ssl-server-verify require
    {% else %}
    ssl-server-verify none
    {% endif %}
    log         127.0.0.1 local2 {{ haproxy_log_level }}

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# Web-based stats
#---------------------------------------------------------------------
listen stats
    bind *:1936
    mode http
    log global

    maxconn 10

    timeout client  100s
    timeout server  100s
    timeout connect 100s
    timeout queue   100s

    stats enable
    stats hide-version
    stats refresh 30s
    stats show-node
    # stats auth admin:admin
    stats uri  /haproxy?stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    balance                 {{ haproxy_default_balance }}
    {% if haproxy_default_option_http_server_close %}
    option http-server-close
    {% endif %}
    {% if haproxy_default_cookie_conf %}
    cookie {{ haproxy_default_cookie_conf }}
    {% endif %}
    retries                 3
    timeout http-request    {{ haproxy_default_timeout_http_request }}
    timeout queue           {{ haproxy_default_timeout_queue }}
    timeout connect         {{ haproxy_default_timeout_connect }}
    timeout client          {{ haproxy_default_timeout_client }}
    timeout server          {{ haproxy_default_timeout_server }}
    timeout http-keep-alive {{ haproxy_default_timeout_http_keep_alive }}
    timeout check           {{ haproxy_default_timeout_check }}
    maxconn                 {{ haproxy_default_maxconn }}

{% for e in haproxy_default_extra %}
    {{ e }}
{% endfor %}

{% for fe_idx in range(0, haproxy_frontends|count) %}
{% set fe = haproxy_frontends[fe_idx] %}
{% set https_redirect = fe.https_redirect|default(haproxy_frontend_https_redirect_default) %}
{% set name_routes = fe.name_routes|default([]) %}

frontend {{ fe.name|default('fe' + fe_idx|string)}}
    {% if fe.ssl|default(False) %}
        {% set bind_ssl_opts = "ssl crt /etc/ssl/haproxy" %}
    reqadd X-Forwarded-Proto:\ https
    {% else %}
        {% set bind_ssl_opts = "" %}
    {% endif %}
    {% for bind in [ fe.bind ]|flatten %}
    bind {{ bind }} {{ bind_ssl_opts }}
    {% endfor %}

    {% if https_redirect %}
    # HTTPS Redirect
        {% set https_redirect_port = fe.https_redirect_port|default(443) %}
        {% if https_redirect_port == 443 %}
            {% set https_redirect_port_suffix = "" %}
        {% else %}
            {% set https_redirect_port_suffix = ":" + https_redirect_port|string %}
        {% endif %}
    http-request redirect prefix https://%[req.hdr(Host)]{{ https_redirect_port_suffix }} drop-query if { ssl_fc,not }
    {% endif %}

    # Define hosts
    {% for r in name_routes %}
    acl host_{{ r.hostname }} hdr_sub(host) -i {{ r.hostname }}
    {% endfor %}

    # Path-based rules
    {% for r in name_routes %}
        {% for p in r.path_rules|default([]) %}
    use_backend p_{{ r.hostname }}{{ p.path|replace('/', '-') }} if host_{{ r.hostname }} { path -m beg {{ p.path }} }
        {% endfor %}
    {% endfor %}

    # Host default targets
    {% for r in name_routes %}
    use_backend host_{{ r.hostname }}_default if host_{{ r.hostname }}
    {% endfor %}

{% endfor %}

{% macro backend(name, ssl, targets) -%}
    {% if ssl %}
      {% set server_ssl_opts = "ssl" %}
    {% else %}
      {% set server_ssl_opts = "" %}
    {% endif %}

backend {{ name }}
    {# TODO: Make backend cookies configuratble #}
    cookie PERSIST_{{ name|hash('md5') }} insert indirect nocache dynamic
    dynamic-cookie-key {{ (name + haproxy_dynamic_cookie_salt)|hash('md5') }}
    {% for t in targets %}
    server {{ t.split(".")[0] }} {{ t }} {{ server_ssl_opts }} check
    {% endfor %}
{%- endmacro %}

{% for fe in haproxy_frontends %}
    {% set name_routes = fe.name_routes|default([]) %}
    {% for r in name_routes %}
        {% for p in r.path_rules|default([]) %}
            {{ backend("p_" + r.hostname + p.path|replace('/', '-'),
                       p.target_ssl|default(haproxy_backend_ssl),
                       p.targets) }}
        {% endfor %}

        {{ backend("host_" + r.hostname + "_default",
                   r.default_target_ssl|default(haproxy_backend_ssl),
                   r.default_targets) }}
    {% endfor %}
{% endfor %}
